name: CICD for Group 2 Chat Application - Staging
run-name: ${{ github.actor }} is running CICD for Group 2 Chat Application - Staging


on:
  push:
    branches: [ stage ]
  
# Define permissions for this workflow, which can be added at either the job or workflow level.      
permissions:
  id-token: write # This is required for requesting the JWT
  actions: read
  contents: read
  security-events: write


jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The jobs are triggered by a ${{ github.event_name }} event on ${{ github.ref_name }} branch."

  deploy-to-stage:
    runs-on: ubuntu-latest
    needs: [ pre-deploy ]
    name: Deploy to Staging Environment
    env:
      environment: ${{ github.ref_name }}
      port: 8000
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Syntax for accessing outputs from a reusable workflow is "needs.<reusable>.outputs.<output>".
          # role-to-assume: ${{ needs.get-aws-info.outputs.role_to_assume }}
          # aws-region: ${{ needs.get-aws-info.outputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Get ECR URL from Terraform
        id: terraform-ecr
        working-directory: ./modules/ecr
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve -refresh-only
          echo "ecr_url=$(terraform output -json | jq -r .repository_url.value)" >> $GITHUB_OUTPUT
          echo "image_digest=$(terraform output -json | jq -r .image_digest.value)" >> $GITHUB_OUTPUT
      - name: Create AWS ECS Fargate
        working-directory: ./environments/${{ env.environment }}
        id: terraform-ecs
        run: |
          terraform init
          terraform apply -auto-approve -var "image_name=${{ steps.terraform-ecr.outputs.ecr_url }}" -var "image_digest=${{ steps.terraform-ecr.outputs.image_digest }}"
          echo "access_url=$(terraform output -json | jq -r .alb_hostname.value)"
          echo "access_url=$(terraform output -json | jq -r .alb_hostname.value)" >> $GITHUB_OUTPUT
          echo "target_group_arn=$(terraform output -json | jq -r .target_group_arn.value)" >> $GITHUB_OUTPUT
      - name: Check ALB Target Group Health Status
        run: |
          target_group_arn=${{ steps.terraform-ecs.outputs.target_group_arn }}
          while true; do
            health_status=$(aws elbv2 describe-target-health --target-group-arn $target_group_arn --query "TargetHealthDescriptions[0].TargetHealth.State" --output text)
            if [[ "$health_status" == "healthy" ]]; then
                    echo "Targets are healthy!"
                    break
                else
                    echo "Current status of target: $health_status. Waiting..."
                    sleep 10  # Check every 30 seconds
                fi
          done
      - name: Echo Access URL
        run: echo "The Access URL is http://${{ steps.terraform-ecs.outputs.access_url }}:${{ env.port }}"